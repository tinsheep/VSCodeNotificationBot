{"version":3,"sources":["httpTrigger.js"],"names":["notificationTemplate","require","AdaptiveCards","bot","AppCredential","createMicrosoftGraphClientWithCredential","ResponseType","module","exports","context","req","notification","installations","target","appAuthConfig","authorityHost","process","env","M365_AUTHORITY_HOST","clientId","M365_CLIENT_ID","tenantId","M365_TENANT_ID","clientSecret","M365_CLIENT_SECRET","appCredential","graphClient","teamTemplate","TEAMS_TEMPLATE_ID","displayName","description","members","roles","MOD_ID","api","responseType","RAW","post","team","console","log","headers","get","location","teamStatus","checkStatusResponse","status","Promise","resolve","setTimeout","sendAdaptiveCard","declare","render","title","appName","type","notificationUrl","res"],"mappings":"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","sourcesContent":["\nconst notificationTemplate = require(\"./adaptiveCards/notification-default.json\");\nconst { AdaptiveCards } = require(\"@microsoft/adaptivecards-tools\");\nconst { bot } = require(\"./internal/initialize\");\nconst { AppCredential, createMicrosoftGraphClientWithCredential } = require(\"@microsoft/teamsfx\");\nconst { ResponseType } = require('@microsoft/microsoft-graph-client');\n\n// HTTP trigger to send notification. You need to add authentication / authorization for this API. Refer https://aka.ms/teamsfx-notification for more details.\nmodule.exports = async function (context, req) {\n  for (const target of await bot.notification.installations()) {\n\n    //try this: **********************************************\n    const appAuthConfig = {\n      authorityHost: process.env.M365_AUTHORITY_HOST,\n      clientId: process.env.M365_CLIENT_ID,\n      tenantId: process.env.M365_TENANT_ID,\n      clientSecret: process.env.M365_CLIENT_SECRET\n    }\n    const appCredential = new AppCredential(appAuthConfig)\n    const graphClient = createMicrosoftGraphClientWithCredential(appCredential);\n\n       \n    //create Incident response team from a teamsTemplate\n\n    const teamTemplate = {\n      'template@odata.bind': 'https://graph.microsoft.com/v1.0/teamsTemplates(\\'' + process.env.TEAMS_TEMPLATE_ID  +  '\\')',\n      displayName: 'My Incident 327-1',\n      description: 'My Incident 327-1 description',\n      members:[\n          {\n             '@odata.type': '#microsoft.graph.aadUserConversationMember',\n             roles:[\n                'owner'\n             ],\n             'user@odata.bind': 'https://graph.microsoft.com/v1.0/users/' + process.env.MOD_ID\n          }\n      ]\n    }\n\n    const team = await graphClient\n        .api('/teams')\n        .responseType(ResponseType.RAW)\n        .post(teamTemplate);\n    console.log(team.headers.get('client-request-id'));\n\n    // get the URL value where we can make the call to check if the asynchonous operation to create the Team is complete.\n    // this can take a minute or so\n    const location = team.headers.get('Location')\n\n    let teamStatus = \"inProgress\";\n    while (teamStatus != \"succeeded\") {\n      const checkStatusResponse = await graphClient.api(location).get();\n      teamStatus = checkStatusResponse.status;\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n    }\n    console.log(\"Team created successfully!\");\n\n\n    //********************************************************/\n\n    await target.sendAdaptiveCard(\n      AdaptiveCards.declare(notificationTemplate).render({\n        title: \"New Incident Occurred!\",\n        appName: \"Disaster Tech\",\n        description: `Welcome to the new incident team. Here is the Incident Action Plan:  ${target.type}`,\n        notificationUrl: \"https://m365x501367.sharepoint.com/sites/MyIncident4/Shared%20Documents/General/469308021927-5522126379-ticket.pdf\",\n      })\n    );\n  }\n\n  /****** To distinguish different target types ******/\n  /** \"Channel\" means this bot is installed to a Team (default to notify General channel)\n  if (target.type === NotificationTargetType.Channel) {\n    // Directly notify the Team (to the default General channel)\n    await target.sendAdaptiveCard(...);\n    // List all channels in the Team then notify each channel\n    const channels = await target.channels();\n    for (const channel of channels) {\n      await channel.sendAdaptiveCard(...);\n    }\n    // List all members in the Team then notify each member\n    const members = await target.members();\n    for (const member of members) {\n      await member.sendAdaptiveCard(...);\n    }\n  }\n  **/\n\n  /** \"Group\" means this bot is installed to a Group Chat\n  if (target.type === NotificationTargetType.Group) {\n    // Directly notify the Group Chat\n    await target.sendAdaptiveCard(...);\n    // List all members in the Group Chat then notify each member\n    const members = await target.members();\n    for (const member of members) {\n      await member.sendAdaptiveCard(...);\n    }\n  }\n  **/\n\n  /** \"Person\" means this bot is installed as a Personal app\n  if (target.type === NotificationTargetType.Person) {\n    // Directly notify the individual person\n    await target.sendAdaptiveCard(...);\n  }\n  **/\n\n  context.res = {};\n};\n"],"file":"httpTrigger.dev.js"}