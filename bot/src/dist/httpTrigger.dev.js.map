{"version":3,"sources":["httpTrigger.js"],"names":["notificationTemplate","require","AdaptiveCards","bot","AppCredential","createMicrosoftGraphClientWithCredential","ResponseType","module","exports","context","req","getGeneralChannelDriveId","uploadFileToTeamsChannel","driveId","teamId","graphClient","filePath","fs","path","fileName","basename","fileSize","statSync","size","fileContent","createReadStream","api","post","item","name","uploadSession","uploadUrl","maxChunkSize","start","end","fileSlice","Buffer","alloc","bytesRead","read","fetch","method","headers","body","slice","response","deepLink","encodeURIComponent","appAuthConfig","tenantId","generalChannelId","uploadedFileUrl","console","log","error","client","filter","select","get","channels","value","id","drive","parentReference","notification","installations","target","authorityHost","process","env","M365_AUTHORITY_HOST","clientId","M365_CLIENT_ID","M365_TENANT_ID","clientSecret","M365_CLIENT_SECRET","appCredential","teamTemplate","TEAMS_TEMPLATE_ID","displayName","description","members","roles","MOD_ID","responseType","RAW","team","location","match","teamStatus","checkStatusResponse","status","Promise","resolve","setTimeout","incidentReportUrl","sendAdaptiveCard","declare","render","title","appName","type","notificationUrl","res"],"mappings":"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","sourcesContent":["\nconst notificationTemplate = require(\"./adaptiveCards/notification-default.json\");\nconst { AdaptiveCards } = require(\"@microsoft/adaptivecards-tools\");\nconst { bot } = require(\"./internal/initialize\");\nconst { AppCredential, createMicrosoftGraphClientWithCredential } = require(\"@microsoft/teamsfx\");\nconst { ResponseType } = require('@microsoft/microsoft-graph-client');\n\n\n// HTTP trigger to send notification. You need to add authentication / authorization for this API. Refer https://aka.ms/teamsfx-notification for more details.\nmodule.exports = async function (context, req) {\n  for (const target of await bot.notification.installations()) {\n\n    //try this: **********************************************\n    const appAuthConfig = {\n      authorityHost: process.env.M365_AUTHORITY_HOST,\n      clientId: process.env.M365_CLIENT_ID,\n      tenantId: process.env.M365_TENANT_ID,\n      clientSecret: process.env.M365_CLIENT_SECRET\n    }\n    const appCredential = new AppCredential(appAuthConfig)\n    const graphClient = createMicrosoftGraphClientWithCredential(appCredential);\n\n       \n    //create Incident response team from a teamsTemplate\n\n    const teamTemplate = {\n      'template@odata.bind': 'https://graph.microsoft.com/v1.0/teamsTemplates(\\'' + process.env.TEAMS_TEMPLATE_ID  +  '\\')',\n      displayName: 'My Incident 43-6',\n      description: 'My Incident 43-6 description',\n      members:[\n          {\n             '@odata.type': '#microsoft.graph.aadUserConversationMember',\n             roles:[\n                'owner'\n             ],\n             'user@odata.bind': 'https://graph.microsoft.com/v1.0/users/' + process.env.MOD_ID\n          }\n      ]\n    }\n\n    const team = await graphClient\n        .api('/teams')\n        .responseType(ResponseType.RAW)\n        .post(teamTemplate);\n    console.log(team.headers.get('client-request-id'));\n\n\n    // get the URL value where we can make the call to check if the asynchonous operation to create the Team is complete.\n    // this can take a couple of minutes to fully complete.\n    const location = team.headers.get('Location');\n    // also get the teamId out of the location URL\n    const teamId = location.match(/'([^']+)'/)[1];\n\n    let teamStatus = \"inProgress\";\n    while (teamStatus != \"succeeded\") {\n      const checkStatusResponse = await graphClient.api(location).get();\n      teamStatus = checkStatusResponse.status;\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n    }\n    console.log(\"Team created successfully!\");\n\n    // I need the driveId so i can post the incident report to the channel\n    const {driveId, generalChannelId} = await getGeneralChannelDriveId(teamId, graphClient);\n    console.log(`The driveId of the General channel for team ${teamId} is ${driveId}`);\n    console.log(`The id of the General channel for team ${teamId} is ${generalChannelId}`);\n\n    const filePath = 'C:\\\\OneNoteLocal\\\\Incident Report.pdf';\n\n    //upload the incident report to the general channel\n    const incidentReportUrl = await uploadFileToTeamsChannel(driveId, teamId, graphClient, filePath);\n    console.log(`File uploaded to General channel: ${incidentReportUrl}`);\n\n\n    //********************************************************/\n\n    await target.sendAdaptiveCard(\n      AdaptiveCards.declare(notificationTemplate).render({\n        title: \"New Incident Occurred!\",\n        appName: \"Disaster Tech\",\n        description: `Welcome to the new incident team. Here is the Incident Action Plan:  ${target.type}`,\n        notificationUrl: incidentReportUrl,\n      })\n    );\n  }\n\n  /****** To distinguish different target types ******/\n  /** \"Channel\" means this bot is installed to a Team (default to notify General channel)\n  if (target.type === NotificationTargetType.Channel) {\n    // Directly notify the Team (to the default General channel)\n    await target.sendAdaptiveCard(...);\n    // List all channels in the Team then notify each channel\n    const channels = await target.channels();\n    for (const channel of channels) {\n      await channel.sendAdaptiveCard(...);\n    }\n    // List all members in the Team then notify each member\n    const members = await target.members();\n    for (const member of members) {\n      await member.sendAdaptiveCard(...);\n    }\n  }\n  **/\n\n  /** \"Group\" means this bot is installed to a Group Chat\n  if (target.type === NotificationTargetType.Group) {\n    // Directly notify the Group Chat\n    await target.sendAdaptiveCard(...);\n    // List all members in the Group Chat then notify each member\n    const members = await target.members();\n    for (const member of members) {\n      await member.sendAdaptiveCard(...);\n    }\n  }\n  **/\n\n  /** \"Person\" means this bot is installed as a Personal app\n  if (target.type === NotificationTargetType.Person) {\n    // Directly notify the individual person\n    await target.sendAdaptiveCard(...);\n  }\n  **/\n\n  context.res = {};\n\n  async function getGeneralChannelDriveId(teamId, client) {\n    const channels = await client.api(`/teams/${teamId}/channels`).filter(`displayName eq 'General'`).select('id').get();\n    const generalChannelId = channels.value[0].id;\n    const drive = await client.api(`/teams/${teamId}/channels/${generalChannelId}/filesFolder`).get();\n    const driveId = drive.parentReference.driveId;\n    return {driveId, generalChannelId};\n  }\n\n\n  async function uploadFileToTeamsChannel(driveId, teamId, graphClient, filePath) {\n    const fs = require('fs');\n    const path = require('path');\n    const fileName = path.basename(filePath);\n    const fileSize = fs.statSync(filePath).size;\n    const fileContent = fs.createReadStream(filePath);\n\n    //A Microsoft Graph API call to upload a local file to the Teams General channel\n  \n    try {\n      const uploadSession = await graphClient.api(`/drives/${driveId}/root:/General/${fileName}:/createUploadSession`)\n        .post({\n          item: {\n            '@microsoft.graph.conflictBehavior': 'rename',\n            name: fileName,\n          },\n        });\n   \n      const uploadUrl = uploadSession.uploadUrl;\n      const maxChunkSize = 320 * 1024; // 320 KB\n      let start = 0;\n      let end = maxChunkSize;\n      let fileSlice;\n     \n      while (start < fileSize) {\n        if (fileSize - end < 0) {\n          end = fileSize;\n        }\n      \n        fileSlice = Buffer.alloc(maxChunkSize);\n        const bytesRead = fileContent.read(fileSlice, 0, maxChunkSize, start);\n      \n        const response = await fetch(uploadUrl, {\n          method: 'PUT',\n          headers: {\n            'Content-Range': `bytes ${start}-${start + bytesRead - 1}/${fileSize}`,\n          },\n          body: fileSlice.slice(0, bytesRead),\n        });\n      \n        start += bytesRead;\n        end += maxChunkSize;\n      }\n\n      //Complete the upload\n      const response = await fetch(uploadUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Length': 0,\n        },\n      });\n\n      //Get the URL to the uploaded file\n\n\n      const deepLink = `https://teams.microsoft.com/l/file/${encodeURIComponent(fileName)}/preview?groupId=${teamId}&tenantId=${appAuthConfig.tenantId}&channelId=${generalChannelId}`;\n      const uploadedFileUrl = `https://teams.microsoft.com/_#/files/tab/${teamId}/${driveId}/${encodeURIComponent(fileName)}`;\n      console.log(`File uploaded successfully to ${uploadedFileUrl}`);\n      return deepLink;\n    } catch (error) {\n      console.error(`Error uploading file: ${error}`);\n      throw error;\n    }\n  }\n\n};\n"],"file":"httpTrigger.dev.js"}