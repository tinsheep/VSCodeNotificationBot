{"version":3,"sources":["httpTrigger.js"],"names":["notificationTemplate","require","AdaptiveCards","bot","AppCredential","createMicrosoftGraphClientWithCredential","module","exports","context","req","notification","installations","target","appAuthConfig","authorityHost","process","env","M365_AUTHORITY_HOST","clientId","M365_CLIENT_ID","tenantId","M365_TENANT_ID","clientSecret","M365_CLIENT_SECRET","appCredential","graphClient","teamTemplate","TEAMS_TEMPLATE_ID","displayName","description","members","roles","MOD_ID","api","post","team","sendAdaptiveCard","declare","render","title","appName","type","notificationUrl","res"],"mappings":";;AACA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,2CAAD,CAApC;;eAC0BA,OAAO,CAAC,gCAAD,C;IAAzBC,a,YAAAA,a;;gBACQD,OAAO,CAAC,uBAAD,C;IAAfE,G,aAAAA,G,EACR;;;gBACoEF,OAAO,CAAC,oBAAD,C;IAAnEG,a,aAAAA,a;IAAeC,wC,aAAAA,wC,EAEvB;;;AACAC,MAAM,CAACC,OAAP,GAAiB,iBAAgBC,OAAhB,EAAyBC,GAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACYN,GAAG,CAACO,YAAJ,CAAiBC,aAAjB,EADZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACJC,UAAAA,MADI;AAGb;AACMC,UAAAA,aAJO,GAIS;AACpBC,YAAAA,aAAa,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADP;AAEpBC,YAAAA,QAAQ,EAAEH,OAAO,CAACC,GAAR,CAAYG,cAFF;AAGpBC,YAAAA,QAAQ,EAAEL,OAAO,CAACC,GAAR,CAAYK,cAHF;AAIpBC,YAAAA,YAAY,EAAEP,OAAO,CAACC,GAAR,CAAYO;AAJN,WAJT;AAUPC,UAAAA,aAVO,GAUS,IAAIpB,aAAJ,CAAkBS,aAAlB,CAVT,EAWb;;AACMY,UAAAA,WAZO,GAYOpB,wCAAwC,CAACmB,aAAD,CAZ/C,EAcb;;AAEME,UAAAA,YAhBO,GAgBQ;AACnB,mCAAuB,uDAAuDX,OAAO,CAACC,GAAR,CAAYW,iBAAnE,GAAyF,KAD7F;AAEnBC,YAAAA,WAAW,EAAE,eAFM;AAGnBC,YAAAA,WAAW,EAAE,2BAHM;AAInBC,YAAAA,OAAO,EAAC,CACJ;AACG,6BAAe,4CADlB;AAEGC,cAAAA,KAAK,EAAC,CACH,OADG,CAFT;AAKG,iCAAmB,4CAA4ChB,OAAO,CAACC,GAAR,CAAYgB;AAL9E,aADI;AAJW,WAhBR;AAAA;AAAA,0CA+BMP,WAAW,CAACQ,GAAZ,CAAgB,QAAhB,EAA0BC,IAA1B,CAA+BR,YAA/B,CA/BN;;AAAA;AA+BPS,UAAAA,IA/BO;AAAA;AAAA,0CAoCPvB,MAAM,CAACwB,gBAAP,CACJlC,aAAa,CAACmC,OAAd,CAAsBrC,oBAAtB,EAA4CsC,MAA5C,CAAmD;AACjDC,YAAAA,KAAK,EAAE,wBAD0C;AAEjDC,YAAAA,OAAO,EAAE,eAFwC;AAGjDX,YAAAA,WAAW,iFAA0EjB,MAAM,CAAC6B,IAAjF,CAHsC;AAIjDC,YAAAA,eAAe,EAAE;AAJgC,WAAnD,CADI,CApCO;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AA8Cf;;AACA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;AAYA;;;;;;AAOAlC,UAAAA,OAAO,CAACmC,GAAR,GAAc,EAAd;;AAnFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["\nconst notificationTemplate = require(\"./adaptiveCards/notification-default.json\");\nconst { AdaptiveCards } = require(\"@microsoft/adaptivecards-tools\");\nconst { bot } = require(\"./internal/initialize\");\n//try this:\nconst { AppCredential, createMicrosoftGraphClientWithCredential } = require(\"@microsoft/teamsfx\");\n\n// HTTP trigger to send notification. You need to add authentication / authorization for this API. Refer https://aka.ms/teamsfx-notification for more details.\nmodule.exports = async function (context, req) {\n  for (const target of await bot.notification.installations()) {\n\n    //try this: **********************************************\n    const appAuthConfig = {\n      authorityHost: process.env.M365_AUTHORITY_HOST,\n      clientId: process.env.M365_CLIENT_ID,\n      tenantId: process.env.M365_TENANT_ID,\n      clientSecret: process.env.M365_CLIENT_SECRET\n    }\n    const appCredential = new AppCredential(appAuthConfig)\n    //const token = appCredential.getToken()\n    const graphClient = createMicrosoftGraphClientWithCredential(appCredential);\n\n    //create Incident response team from a teamsTemplate\n\n    const teamTemplate = {\n      'template@odata.bind': 'https://graph.microsoft.com/v1.0/teamsTemplates(\\'' + process.env.TEAMS_TEMPLATE_ID  +  '\\')',\n      displayName: 'My Incident A',\n      description: 'My Incident A description',\n      members:[\n          {\n             '@odata.type': '#microsoft.graph.aadUserConversationMember',\n             roles:[\n                'owner'\n             ],\n             'user@odata.bind': 'https://graph.microsoft.com/v1.0/users/' + process.env.MOD_ID\n          }\n      ]\n    }\n\n    const team = await graphClient.api('/teams').post(teamTemplate);\n    \n\n    //********************************************************/\n\n    await target.sendAdaptiveCard(\n      AdaptiveCards.declare(notificationTemplate).render({\n        title: \"New Incident Occurred!\",\n        appName: \"Disaster Tech\",\n        description: `Welcome to the new incident team. Here is the Incident Action Plan:  ${target.type}`,\n        notificationUrl: \"https://m365x501367.sharepoint.com/sites/MyIncident4/Shared%20Documents/General/469308021927-5522126379-ticket.pdf\",\n      })\n    );\n  }\n\n  /****** To distinguish different target types ******/\n  /** \"Channel\" means this bot is installed to a Team (default to notify General channel)\n  if (target.type === NotificationTargetType.Channel) {\n    // Directly notify the Team (to the default General channel)\n    await target.sendAdaptiveCard(...);\n    // List all channels in the Team then notify each channel\n    const channels = await target.channels();\n    for (const channel of channels) {\n      await channel.sendAdaptiveCard(...);\n    }\n    // List all members in the Team then notify each member\n    const members = await target.members();\n    for (const member of members) {\n      await member.sendAdaptiveCard(...);\n    }\n  }\n  **/\n\n  /** \"Group\" means this bot is installed to a Group Chat\n  if (target.type === NotificationTargetType.Group) {\n    // Directly notify the Group Chat\n    await target.sendAdaptiveCard(...);\n    // List all members in the Group Chat then notify each member\n    const members = await target.members();\n    for (const member of members) {\n      await member.sendAdaptiveCard(...);\n    }\n  }\n  **/\n\n  /** \"Person\" means this bot is installed as a Personal app\n  if (target.type === NotificationTargetType.Person) {\n    // Directly notify the individual person\n    await target.sendAdaptiveCard(...);\n  }\n  **/\n\n  context.res = {};\n};\n"],"file":"httpTrigger.dev.js"}