{"version":3,"sources":["httpTrigger.js"],"names":["notificationTemplate","require","bot","AppCredential","createMicrosoftGraphClientWithCredential","AdaptiveCards","module","exports","context","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","target","_appAuthConfig","appCredential","graphClient","teamTemplate","team","location","teamId","teamStatus","checkStatusResponse","_ref","driveId","_generalChannelId","incidentReportUrl","channels","regeneratorRuntime","async","_context3","prev","next","filePath","fs","path","fileName","fileSize","fileContent","uploadSession","uploadUrl","maxChunkSize","start","end","fileSlice","bytesRead","deepLink","uploadedFileUrl","_context2","generalChannelId","basename","statSync","size","createReadStream","awrap","api","concat","post","item","@microsoft.graph.conflictBehavior","name","sent","Buffer","alloc","read","process","env","M365_AUTHORITY_HOST","clientId","tenantId","clientSecret","M365_CLIENT_SECRET","slice","fetch","roles","headers","Content-Length","console","encodeURIComponent","appAuthConfig","log","abrupt","t0","stop","client","drive","_context","value","filter","select","get","id","parentReference","undefined","notification","installations","Symbol","iterator","done","authorityHost","ResponseType","M365_CLIENT_ID","M365_TENANT_ID","uploadFileToTeamsChannel","template@odata.bind","TEAMS_TEMPLATE_ID","displayName","description","members","@odata.type","MOD_ID","responseType","RAW","match","Promise","resolve","setTimeout","getGeneralChannelDriveId","method","sendAdaptiveCard","declare","render","response","type","notificationUrl","t1","finish","res"],"mappings":"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","file":"httpTrigger.min.js","sourcesContent":["\nconst notificationTemplate = require(\"./adaptiveCards/notification-default.json\");\nconst { AdaptiveCards } = require(\"@microsoft/adaptivecards-tools\");\nconst { bot } = require(\"./internal/initialize\");\nconst { AppCredential, createMicrosoftGraphClientWithCredential } = require(\"@microsoft/teamsfx\");\nconst { ResponseType } = require('@microsoft/microsoft-graph-client');\n\n\n// HTTP trigger to send notification. You need to add authentication / authorization for this API. Refer https://aka.ms/teamsfx-notification for more details.\nmodule.exports = async function (context, req) {\n  for (const target of await bot.notification.installations()) {\n\n    //try this: **********************************************\n    const appAuthConfig = {\n      authorityHost: process.env.M365_AUTHORITY_HOST,\n      clientId: process.env.M365_CLIENT_ID,\n      tenantId: process.env.M365_TENANT_ID,\n      clientSecret: process.env.M365_CLIENT_SECRET\n    }\n    const appCredential = new AppCredential(appAuthConfig)\n    const graphClient = createMicrosoftGraphClientWithCredential(appCredential);\n\n       \n    //create Incident response team from a teamsTemplate\n\n    const teamTemplate = {\n      'template@odata.bind': 'https://graph.microsoft.com/v1.0/teamsTemplates(\\'' + process.env.TEAMS_TEMPLATE_ID  +  '\\')',\n      displayName: 'My Incident 43-6',\n      description: 'My Incident 43-6 description',\n      members:[\n          {\n             '@odata.type': '#microsoft.graph.aadUserConversationMember',\n             roles:[\n                'owner'\n             ],\n             'user@odata.bind': 'https://graph.microsoft.com/v1.0/users/' + process.env.MOD_ID\n          }\n      ]\n    }\n\n    const team = await graphClient\n        .api('/teams')\n        .responseType(ResponseType.RAW)\n        .post(teamTemplate);\n    console.log(team.headers.get('client-request-id'));\n\n\n    // get the URL value where we can make the call to check if the asynchonous operation to create the Team is complete.\n    // this can take a couple of minutes to fully complete.\n    const location = team.headers.get('Location');\n    // also get the teamId out of the location URL\n    const teamId = location.match(/'([^']+)'/)[1];\n\n    let teamStatus = \"inProgress\";\n    while (teamStatus != \"succeeded\") {\n      const checkStatusResponse = await graphClient.api(location).get();\n      teamStatus = checkStatusResponse.status;\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n    }\n    console.log(\"Team created successfully!\");\n\n    // I need the driveId so i can post the incident report to the channel\n    const {driveId, generalChannelId} = await getGeneralChannelDriveId(teamId, graphClient);\n    console.log(`The driveId of the General channel for team ${teamId} is ${driveId}`);\n    console.log(`The id of the General channel for team ${teamId} is ${generalChannelId}`);\n\n    const filePath = 'C:\\\\OneNoteLocal\\\\Incident Report.pdf';\n\n    //upload the incident report to the general channel\n    const incidentReportUrl = await uploadFileToTeamsChannel(driveId, teamId, graphClient, filePath);\n    console.log(`File uploaded to General channel: ${incidentReportUrl}`);\n\n\n    //********************************************************/\n\n    await target.sendAdaptiveCard(\n      AdaptiveCards.declare(notificationTemplate).render({\n        title: \"New Incident Occurred!\",\n        appName: \"Disaster Tech\",\n        description: `Welcome to the new incident team. Here is the Incident Action Plan:  ${target.type}`,\n        notificationUrl: incidentReportUrl,\n      })\n    );\n  }\n\n  /****** To distinguish different target types ******/\n  /** \"Channel\" means this bot is installed to a Team (default to notify General channel)\n  if (target.type === NotificationTargetType.Channel) {\n    // Directly notify the Team (to the default General channel)\n    await target.sendAdaptiveCard(...);\n    // List all channels in the Team then notify each channel\n    const channels = await target.channels();\n    for (const channel of channels) {\n      await channel.sendAdaptiveCard(...);\n    }\n    // List all members in the Team then notify each member\n    const members = await target.members();\n    for (const member of members) {\n      await member.sendAdaptiveCard(...);\n    }\n  }\n  **/\n\n  /** \"Group\" means this bot is installed to a Group Chat\n  if (target.type === NotificationTargetType.Group) {\n    // Directly notify the Group Chat\n    await target.sendAdaptiveCard(...);\n    // List all members in the Group Chat then notify each member\n    const members = await target.members();\n    for (const member of members) {\n      await member.sendAdaptiveCard(...);\n    }\n  }\n  **/\n\n  /** \"Person\" means this bot is installed as a Personal app\n  if (target.type === NotificationTargetType.Person) {\n    // Directly notify the individual person\n    await target.sendAdaptiveCard(...);\n  }\n  **/\n\n  context.res = {};\n\n  async function getGeneralChannelDriveId(teamId, client) {\n    const channels = await client.api(`/teams/${teamId}/channels`).filter(`displayName eq 'General'`).select('id').get();\n    const generalChannelId = channels.value[0].id;\n    const drive = await client.api(`/teams/${teamId}/channels/${generalChannelId}/filesFolder`).get();\n    const driveId = drive.parentReference.driveId;\n    return {driveId, generalChannelId};\n  }\n\n\n  async function uploadFileToTeamsChannel(driveId, teamId, graphClient, filePath) {\n    const fs = require('fs');\n    const path = require('path');\n    const fileName = path.basename(filePath);\n    const fileSize = fs.statSync(filePath).size;\n    const fileContent = fs.createReadStream(filePath);\n\n    //A Microsoft Graph API call to upload a local file to the Teams General channel\n  \n    try {\n      const uploadSession = await graphClient.api(`/drives/${driveId}/root:/General/${fileName}:/createUploadSession`)\n        .post({\n          item: {\n            '@microsoft.graph.conflictBehavior': 'rename',\n            name: fileName,\n          },\n        });\n   \n      const uploadUrl = uploadSession.uploadUrl;\n      const maxChunkSize = 320 * 1024; // 320 KB\n      let start = 0;\n      let end = maxChunkSize;\n      let fileSlice;\n     \n      while (start < fileSize) {\n        if (fileSize - end < 0) {\n          end = fileSize;\n        }\n      \n        fileSlice = Buffer.alloc(maxChunkSize);\n        const bytesRead = fileContent.read(fileSlice, 0, maxChunkSize, start);\n      \n        const response = await fetch(uploadUrl, {\n          method: 'PUT',\n          headers: {\n            'Content-Range': `bytes ${start}-${start + bytesRead - 1}/${fileSize}`,\n          },\n          body: fileSlice.slice(0, bytesRead),\n        });\n      \n        start += bytesRead;\n        end += maxChunkSize;\n      }\n\n      //Complete the upload\n      const response = await fetch(uploadUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Length': 0,\n        },\n      });\n\n      //Get the URL to the uploaded file\n\n\n      const deepLink = `https://teams.microsoft.com/l/file/${encodeURIComponent(fileName)}/preview?groupId=${teamId}&tenantId=${appAuthConfig.tenantId}&channelId=${generalChannelId}`;\n      const uploadedFileUrl = `https://teams.microsoft.com/_#/files/tab/${teamId}/${driveId}/${encodeURIComponent(fileName)}`;\n      console.log(`File uploaded successfully to ${uploadedFileUrl}`);\n      return deepLink;\n    } catch (error) {\n      console.error(`Error uploading file: ${error}`);\n      throw error;\n    }\n  }\n\n};\n"]}