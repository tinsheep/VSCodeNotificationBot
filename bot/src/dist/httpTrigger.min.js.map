{"version":3,"sources":["httpTrigger.js"],"names":["notificationTemplate","require","bot","AdaptiveCards","createMicrosoftGraphClientWithCredential","module","exports","context","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","target","appAuthConfig","appCredential","graphClient","teamTemplate","regeneratorRuntime","async","_context","prev","next","undefined","awrap","notification","installations","t0","Symbol","iterator","sent","done","value","AppCredential","clientId","process","env","M365_CLIENT_ID","tenantId","M365_TENANT_ID","clientSecret","M365_CLIENT_SECRET","template@odata.bind","TEAMS_TEMPLATE_ID","displayName","description","members","@odata.type","roles","user@odata.bind","MOD_ID","api","post","declare","render","appName","type","notificationUrl","t1","finish","res","stop"],"mappings":"aACA,IAAMA,qBAAuBC,QAAQ,sDAAXA,QAAU,kCAA9BD,uBAAAA,wBAEUC,QAAQ,yBAAhBC,cAAAA,cAE4DD,QAAQ,sBAHpEE,wBAAAA,cAGeC,mDAAAA,yCAGvBC,OAAOC,QAAU,SAJjBC,GAIiB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAb,IAAAD,GAAA,GAAAE,OAAAa,EAAAH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAM,MACYtB,IAAIuB,aAAaC,iBAD7B,KAAA,EAAAN,EAAAO,GAAAC,OAAAC,SAAAlB,EAAAS,EAAAU,KAAAV,EAAAO,MAAA,KAAA,EAAA,GAAAnB,GAAAI,EAAAD,EAAAW,QAAAS,KAAA,CAAAX,EAAAE,KAAA,GAAA,MAAA,OACJT,EADID,EAAAoB,MAHTC,EAOkB,CAPH7B,cAAAA,QAAAA,IAAAA,oBASjB8B,SAAUC,QAAQC,IAAIC,eACtBC,SAAUH,QAAQC,IAAIG,eAPtBC,aAAWL,QAAAC,IAAAK,oBAUP1B,EAAgB,IAAIkB,cAAcnB,GAV3BE,EAAAZ,yCAAAW,GAAAE,EAAA,CAAAyB,sBAAA,oDAAAP,QAAAC,IAAAO,kBAAA,KAAAC,YAAA,gBAAAC,YAAA,4BAAAC,QAAA,CAqBP,CArBOC,cAAA,6CAAAC,MAAA,CAAA,SAAAC,kBAAA,0CAAAd,QAAAC,IAAAc,UAAA9B,EAAAE,KAAA,GAAAJ,mBAAAM,MA+BMR,EAAYmC,IAAI,UAAUC,KAAKnC,IA/BrC,KAAA,GAAA,OAAAG,EAAAU,KAAAV,EAAAE,KAAA,GAAAJ,mBAAAM,MAMXU,EAAAA,iBACAI,cAAQe,QAAElB,sBAHUmB,OAAA,CAIpBd,MAAAA,yBAJoBe,QAJT,gBAUPxC,YAAAA,wEAAAA,OACNF,EAAA2C,MA8BIC,gBAAiB,yHAzCR,KAAA,GAAAjD,GAAA,EAAAY,EAAAE,KAAA,EAAA,MAAA,KAAA,GAAAF,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAsC,GAAAtC,EAAA,MAAA,GAAAX,GAAA,EAAAC,EAAAU,EAAAsC,GAAA,KAAA,GAAAtC,EAAAC,KAAA,GAAAD,EAAAC,KAAA,GAAAb,GAAA,MAAAG,EAAA,QAAAA,EAAA,SAAA,KAAA,GAAA,GAAAS,EAAAC,KAAA,GAAAZ,EAAA,MAAAC,EAAAU,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAuC,OAAA,IAAA,KAAA,GAAA,OAAAvC,EAAAuC,OAAA,IAAA,KAAA,GAAApD,EAAAqD,IAAA,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAxC,EAAAyC,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA","file":"httpTrigger.min.js","sourcesContent":["\nconst notificationTemplate = require(\"./adaptiveCards/notification-default.json\");\nconst { AdaptiveCards } = require(\"@microsoft/adaptivecards-tools\");\nconst { bot } = require(\"./internal/initialize\");\n//try this:\nconst { AppCredential, createMicrosoftGraphClientWithCredential } = require(\"@microsoft/teamsfx\");\n\n// HTTP trigger to send notification. You need to add authentication / authorization for this API. Refer https://aka.ms/teamsfx-notification for more details.\nmodule.exports = async function (context, req) {\n  for (const target of await bot.notification.installations()) {\n\n    //try this: **********************************************\n    const appAuthConfig = {\n      authorityHost: process.env.M365_AUTHORITY_HOST,\n      clientId: process.env.M365_CLIENT_ID,\n      tenantId: process.env.M365_TENANT_ID,\n      clientSecret: process.env.M365_CLIENT_SECRET\n    }\n    const appCredential = new AppCredential(appAuthConfig)\n    //const token = appCredential.getToken()\n    const graphClient = createMicrosoftGraphClientWithCredential(appCredential);\n\n    //create Incident response team from a teamsTemplate\n\n    const teamTemplate = {\n      'template@odata.bind': 'https://graph.microsoft.com/v1.0/teamsTemplates(\\'' + process.env.TEAMS_TEMPLATE_ID  +  '\\')',\n      displayName: 'My Incident A',\n      description: 'My Incident A description',\n      members:[\n          {\n             '@odata.type': '#microsoft.graph.aadUserConversationMember',\n             roles:[\n                'owner'\n             ],\n             'user@odata.bind': 'https://graph.microsoft.com/v1.0/users/' + process.env.MOD_ID\n          }\n      ]\n    }\n\n    const team = await graphClient.api('/teams').post(teamTemplate);\n    \n\n    //********************************************************/\n\n    await target.sendAdaptiveCard(\n      AdaptiveCards.declare(notificationTemplate).render({\n        title: \"New Incident Occurred!\",\n        appName: \"Disaster Tech\",\n        description: `Welcome to the new incident team. Here is the Incident Action Plan:  ${target.type}`,\n        notificationUrl: \"https://m365x501367.sharepoint.com/sites/MyIncident4/Shared%20Documents/General/469308021927-5522126379-ticket.pdf\",\n      })\n    );\n  }\n\n  /****** To distinguish different target types ******/\n  /** \"Channel\" means this bot is installed to a Team (default to notify General channel)\n  if (target.type === NotificationTargetType.Channel) {\n    // Directly notify the Team (to the default General channel)\n    await target.sendAdaptiveCard(...);\n    // List all channels in the Team then notify each channel\n    const channels = await target.channels();\n    for (const channel of channels) {\n      await channel.sendAdaptiveCard(...);\n    }\n    // List all members in the Team then notify each member\n    const members = await target.members();\n    for (const member of members) {\n      await member.sendAdaptiveCard(...);\n    }\n  }\n  **/\n\n  /** \"Group\" means this bot is installed to a Group Chat\n  if (target.type === NotificationTargetType.Group) {\n    // Directly notify the Group Chat\n    await target.sendAdaptiveCard(...);\n    // List all members in the Group Chat then notify each member\n    const members = await target.members();\n    for (const member of members) {\n      await member.sendAdaptiveCard(...);\n    }\n  }\n  **/\n\n  /** \"Person\" means this bot is installed as a Personal app\n  if (target.type === NotificationTargetType.Person) {\n    // Directly notify the individual person\n    await target.sendAdaptiveCard(...);\n  }\n  **/\n\n  context.res = {};\n};\n"]}