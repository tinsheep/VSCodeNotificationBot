{"version":3,"sources":["httpTrigger.js"],"names":["notificationTemplate","require","bot","AppCredential","createMicrosoftGraphClientWithCredential","AdaptiveCards","module","exports","context","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","target","appAuthConfig","appCredential","graphClient","teamTemplate","team","location","teamStatus","checkStatusResponse","regeneratorRuntime","async","_context","prev","next","undefined","awrap","notification","installations","t0","Symbol","iterator","sent","done","value","authorityHost","process","env","M365_AUTHORITY_HOST","clientId","M365_CLIENT_ID","ResponseType","M365_TENANT_ID","clientSecret","M365_CLIENT_SECRET","req","template@odata.bind","TEAMS_TEMPLATE_ID","displayName","description","members","@odata.type","roles","user@odata.bind","MOD_ID","api","responseType","RAW","console","log","headers","get","tenantId","status","resolve","setTimeout","sendAdaptiveCard","declare","render","title","appName","concat","post","notificationUrl","t1","finish","res","stop"],"mappings":"aACA,IAAMA,qBAAuBC,QAAQ,sDAAXA,QAAU,kCAA9BD,uBAAAA,wBAEUC,QAAQ,yBAAhBC,cAAAA,cAC4DD,QAAQ,sBAApEE,wBAAAA,cAF0BC,mDAAAA,mDAGTH,QAHjBI,qCAAAA,uBAAAA,aAMRC,OAAOC,QAAU,SAAgBC,GAAhB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAjB,IAAAD,GAAA,GAAAE,OAAAiB,EAAAH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAM,MACY3B,IAAI4B,aAAaC,iBAD7B,KAAA,EAAAN,EAAAO,GAAAC,OAAAC,SAAAtB,EAAAa,EAAAU,KAAAV,EAAAO,MAAA,KAAA,EAAA,GAAAvB,GAAAI,EAAAD,EAAAe,QAAAS,KAAA,CAAAX,EAAAE,KAAA,GAAA,MAAA,OACJb,EADID,EAAAwB,MAJMjC,EAAAA,CASjBkC,cAAeC,QAAQC,IAAIC,oBAC3BC,SATmBzC,QAAQuC,IAAAG,eAAzBC,SAUQL,QAAQC,IAAIK,eACtBC,aAAcP,QAAQC,IAAIO,oBARzBxC,EAAU,IAAAJ,cAAyB6C,GAAzB/B,EAAAb,yCAAAY,GAAAE,EAAA,CAAA+B,sBAAA,oDAAAV,QAAAC,IAAAU,kBAAA,KAAAC,YAAA,oBAAAC,YAAA,gCAAAC,QAAA,CAAA,CAAAC,cAAA,6CAuBJC,MAAM,CAvBF,SAAAC,kBAAA,0CAAAjB,QAAAC,IAAAiB,UAAAhC,EAAAE,KAAA,GAAAJ,mBAAAM,MAAAZ,EAAAyC,IAAA,UAiCRC,aAAaf,aAAagB,KAhCtB9C,KAAAA,IADI,KAAA,GAAAK,EAAAM,EAAAU,KAGb0B,QAAAC,IAAA3C,EAAA4C,QAAAC,IAAA,sBAIEC,EAAQ9C,EAAEoB,QAAYM,IAAAA,YAHFxB,EAJT,aAAA,KAAA,GAAA,GAAA,aAUPL,EAVO,OAAAS,EAAAE,KAAA,GAAAJ,mBAAAM,MAWOzB,EAAAA,IAAAA,GAAyCY,OAXhDS,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAWPV,EAXOQ,EAAAU,KA4CXd,EAAaC,EAAoB4C,OA5CtBzC,EAAAE,KAAA,GAAAJ,mBAAAM,MAgBPX,IAAAA,QAhBO,SAgBQiD,GAhBR,OAgBQC,WAAAD,EAAA,QAhBR,KAAA,GAAA1C,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAkBXwB,QAAAA,IAAAA,8BAlBW1B,EAAAE,KAAA,GAAAJ,mBAAAM,MA0BJf,EAAAuD,iBALHhE,cADIiE,QAAAtE,sBAAAuE,OAAA,CAJWC,MAhBR,yBAAAC,QAAA,gBAAArB,YAAA,wEAAAsB,OAiCiB5D,EACzB6D,MAuBDC,gBAAiB,yHAzDR,KAAA,GAAAnE,GAAA,EAAAgB,EAAAE,KAAA,EAAA,MAAA,KAAA,GAAAF,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAoD,GAAApD,EAAA,MAAA,GAAAf,GAAA,EAAAC,EAAAc,EAAAoD,GAAA,KAAA,GAAApD,EAAAC,KAAA,GAAAD,EAAAC,KAAA,GAAAjB,GAAA,MAAAG,EAAA,QAAAA,EAAA,SAAA,KAAA,GAAA,GAAAa,EAAAC,KAAA,GAAAhB,EAAA,MAAAC,EAAAc,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAqD,OAAA,IAAA,KAAA,GAAA,OAAArD,EAAAqD,OAAA,IAAA,KAAA,GAAAtE,EAAAuE,IAAA,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAtD,EAAAuD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA","file":"httpTrigger.min.js","sourcesContent":["\nconst notificationTemplate = require(\"./adaptiveCards/notification-default.json\");\nconst { AdaptiveCards } = require(\"@microsoft/adaptivecards-tools\");\nconst { bot } = require(\"./internal/initialize\");\nconst { AppCredential, createMicrosoftGraphClientWithCredential } = require(\"@microsoft/teamsfx\");\nconst { ResponseType } = require('@microsoft/microsoft-graph-client');\n\n// HTTP trigger to send notification. You need to add authentication / authorization for this API. Refer https://aka.ms/teamsfx-notification for more details.\nmodule.exports = async function (context, req) {\n  for (const target of await bot.notification.installations()) {\n\n    //try this: **********************************************\n    const appAuthConfig = {\n      authorityHost: process.env.M365_AUTHORITY_HOST,\n      clientId: process.env.M365_CLIENT_ID,\n      tenantId: process.env.M365_TENANT_ID,\n      clientSecret: process.env.M365_CLIENT_SECRET\n    }\n    const appCredential = new AppCredential(appAuthConfig)\n    const graphClient = createMicrosoftGraphClientWithCredential(appCredential);\n\n       \n    //create Incident response team from a teamsTemplate\n\n    const teamTemplate = {\n      'template@odata.bind': 'https://graph.microsoft.com/v1.0/teamsTemplates(\\'' + process.env.TEAMS_TEMPLATE_ID  +  '\\')',\n      displayName: 'My Incident 327-1',\n      description: 'My Incident 327-1 description',\n      members:[\n          {\n             '@odata.type': '#microsoft.graph.aadUserConversationMember',\n             roles:[\n                'owner'\n             ],\n             'user@odata.bind': 'https://graph.microsoft.com/v1.0/users/' + process.env.MOD_ID\n          }\n      ]\n    }\n\n    const team = await graphClient\n        .api('/teams')\n        .responseType(ResponseType.RAW)\n        .post(teamTemplate);\n    console.log(team.headers.get('client-request-id'));\n\n    // get the URL value where we can make the call to check if the asynchonous operation to create the Team is complete.\n    // this can take a minute or so\n    const location = team.headers.get('Location')\n\n    let teamStatus = \"inProgress\";\n    while (teamStatus != \"succeeded\") {\n      const checkStatusResponse = await graphClient.api(location).get();\n      teamStatus = checkStatusResponse.status;\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n    }\n    console.log(\"Team created successfully!\");\n\n\n    //********************************************************/\n\n    await target.sendAdaptiveCard(\n      AdaptiveCards.declare(notificationTemplate).render({\n        title: \"New Incident Occurred!\",\n        appName: \"Disaster Tech\",\n        description: `Welcome to the new incident team. Here is the Incident Action Plan:  ${target.type}`,\n        notificationUrl: \"https://m365x501367.sharepoint.com/sites/MyIncident4/Shared%20Documents/General/469308021927-5522126379-ticket.pdf\",\n      })\n    );\n  }\n\n  /****** To distinguish different target types ******/\n  /** \"Channel\" means this bot is installed to a Team (default to notify General channel)\n  if (target.type === NotificationTargetType.Channel) {\n    // Directly notify the Team (to the default General channel)\n    await target.sendAdaptiveCard(...);\n    // List all channels in the Team then notify each channel\n    const channels = await target.channels();\n    for (const channel of channels) {\n      await channel.sendAdaptiveCard(...);\n    }\n    // List all members in the Team then notify each member\n    const members = await target.members();\n    for (const member of members) {\n      await member.sendAdaptiveCard(...);\n    }\n  }\n  **/\n\n  /** \"Group\" means this bot is installed to a Group Chat\n  if (target.type === NotificationTargetType.Group) {\n    // Directly notify the Group Chat\n    await target.sendAdaptiveCard(...);\n    // List all members in the Group Chat then notify each member\n    const members = await target.members();\n    for (const member of members) {\n      await member.sendAdaptiveCard(...);\n    }\n  }\n  **/\n\n  /** \"Person\" means this bot is installed as a Personal app\n  if (target.type === NotificationTargetType.Person) {\n    // Directly notify the individual person\n    await target.sendAdaptiveCard(...);\n  }\n  **/\n\n  context.res = {};\n};\n"]}